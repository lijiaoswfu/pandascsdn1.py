# -*- coding: utf-8 -*-
"""
/***************************************************************************
 pluginDemo
                                 A QGIS plugin
 A demo for lijiaoQgis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-01-13
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Lijiao
        email                : 48965058@qq.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .plugin_demo_dialog import pluginDemoDialog
import os.path


class pluginDemo:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'pluginDemo_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&pluginDemo')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('pluginDemo', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/plugin_demo/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'李薇安的小插件'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&pluginDemo'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = pluginDemoDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # 点击确定按钮之后响应的事件
            # 如果你不在QGIS控制台内运行，首先需要导入qgis和PyQt类，如下所示：
            from qgis.core import (
                QgsApplication,
                QgsDataSourceUri,
                QgsCategorizedSymbolRenderer,
                QgsClassificationRange,
                QgsPointXY,
                QgsProject,
                QgsExpression,
                QgsField,
                QgsFields,
                QgsFeature,
                QgsFeatureRequest,
                QgsFeatureRenderer,
                QgsGeometry,
                QgsGraduatedSymbolRenderer,
                QgsMarkerSymbol,
                QgsMessageLog,
                QgsRectangle,
                QgsRendererCategory,
                QgsRendererRange,
                QgsSymbol,
                QgsVectorDataProvider,
                QgsVectorLayer,
                QgsVectorFileWriter,
                QgsWkbTypes,
                QgsSpatialIndex,
                QgsVectorLayerUtils
            )

            from qgis.core.additions.edit import edit

            from qgis.PyQt.QtGui import (
                QColor,
            )

            import os  # pyqgis控制台同样需要
            # 获取项目实例
            project = QgsProject.instance()

            # 打印当前项目的文件名（可能为空，因为没有项目加载）
            # print(project.fileName())

            # 加载另一个项目
            project.read('C:\carl\QGIS\ditu.qgs')
            # print(project.fileName())
            # 获取shapefile的路径，例如：/home/project/data/ports.shp
            path_layer = 'C:\lj123\cb.shp'

            # 格式为：
            # vlayer = QgsVectorLayer(data_source, layer_name, provider_name)
            # 获取tif文件的路径，例如：/home/project/data/srtm.tif
            vlayer = QgsVectorLayer(path_layer, "草本", "ogr")

            if not vlayer.isValid():
                print("图层加载失败！")
            else:
                QgsProject.instance().addMapLayer(vlayer)
                # print(vlayer.displayField())  打印字段显式名字
                '''
                for field in vlayer.fields():
                    print(field.name(), field.typeName())
                    # 打印字段名和字段信息
                '''

            # 获取tif文件的路径，例如：/home/project/data/srtm.tif

            QgsProject.instance().removeMapLayer('gm_26cc56e8_97f4_41e3_b36b_c10672f48381')  # 移除已有的灌木图层
            QgsProject.instance().removeMapLayer('qm_7af64c2c_96f8_4d3c_8199_914c11384907')  # 移除已有的乔木图层






